

#include <omnetpp.h>


class APPositioner : public cSimpleModule
{
  protected:
    // configuration
    double playgroundLat,playgroundLon;  // NW corner of playground, in degrees
    double playgroundHeight,playgroundWidth;  // in meters
    double timeStep;
    unsigned int currentStep;
    double positions[60][2];
    double x, y; // longitude and latitude,
    int id; //Id of this bus
    int updateDelta;//seconds
    int nextTime;
    simsignal_t mobilityStateChangedSignal;


  public:
     APPositioner();
     virtual ~APPositioner();

     double getX() { return x; }
     double getY() { return y; }
     virtual Coord getCurrentPosition();
     virtual Coord getCurrentSpeed();
     int static_callback(void *obj, int argc, char **argv, char **azColName);


  protected:
    virtual void initialize();
    virtual void handleMessage(cMessage *msg);
    int initializePositions(int currentPosition, int updateDelta);
    char* getTimeFromOffset(int offset);
    double* getPlaygroundPosition(double x, double y);
    void emitMobilityStateChangedSignal();

};

Define_Module(APPositioner);

APPositioner::APPositioner()
{
}

APPositioner::~APPositioner()
{
}

Coord APPositioner::getCurrentPosition(){
    Coord c = Coord(x,y,0);
    return c;
}

Coord APPositioner::getCurrentSpeed(){
    Coord c = Coord(0,0,0);
    return c;
}

void APPositioner::initialize()
{
    //printf("BUS INITIALISATION\n");
    mobilityStateChangedSignal = registerSignal("mobilityStateChanged");
    updateDelta = 30;//seconds
    currentStep = 0;
    id = getParentModule()->par("id");
    printf("Initializing node with id: %d\n",id);
    nextTime = initializePositions(0,updateDelta);
    timeStep = par("timeStep");

    this->getParentModule()->getDisplayString().setTagArg("p", 0, x);
    this->getParentModule()->getDisplayString().setTagArg("p", 1, y);

    playgroundLat = simulation.getSystemModule()->par("playgroundLatitude");
    playgroundLon = simulation.getSystemModule()->par("playgroundLongitude");
    playgroundHeight = simulation.getSystemModule()->par("playgroundHeight");
    playgroundWidth = simulation.getSystemModule()->par("playgroundWidth");

    // schedule first move
    cMessage *timer = new cMessage("move");
    scheduleAt(simTime(), timer);
}

void APPositioner::handleMessage(cMessage *msg)
{
    delete msg;
}





double* APPositioner::getPlaygroundPosition(double x, double y){
    //This is duplicated in the access point app layer
    //Top left corner had coordinates 56, -3.4

    double TOPLEFTX = -3.4;
    double TOPLEFTY = 56;

    double* position = (double*)malloc(2*sizeof(double));

    double distanceBetweenDegreesLatitude = 111340.01;
    double distanceBetweenDegreesLongitude = 62473.28;
    double deltaLongitude = x - TOPLEFTX;
    double deltaLatitude = TOPLEFTY - y;

    position[0] = deltaLongitude*distanceBetweenDegreesLongitude;
    position[1] = deltaLatitude*distanceBetweenDegreesLatitude;

    return position;
}


void APPositioner::emitMobilityStateChangedSignal()
{
    emit(mobilityStateChangedSignal, this);
}

