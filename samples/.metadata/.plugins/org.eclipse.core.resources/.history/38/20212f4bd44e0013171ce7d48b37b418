package org.mixim.examples.Buses;

import inet.base.NotificationBoard;
import inet.networklayer.autorouting.ipv4.HostAutoConfigurator;
import inet.networklayer.common.InterfaceTable;
import inet.networklayer.ipv4.RoutingTable;
import inet.transport.udp.UDP;
import inet.nodes.inet.NetworkLayer;
import inet.linklayer.ieee80211.Ieee80211Nic;
import inet.linklayer.IExternalNic;
import inet.linklayer.IWiredNic;

module AP
{
    parameters:
        @node();
        @labels(node);
        @display("i=device/accesspoint");
        double x @unit("") = default(0); // the starting position
        double y @unit("") = default(0); // the starting position
        int id = default(0); // the id of this AP

    gates:
        input radioIn @directIn;
        inout ethg @labels(EtherFrame-conn);

    submodules:
        notificationBoard: NotificationBoard {
            parameters:
                @display("p=181,111");
        }
        ac_wlan: HostAutoConfigurator {
            @display("p=61,181");
        }
        interfaceTable: InterfaceTable {
            parameters:
                @display("p=61,35");
        }
        app: APChat {
            parameters:
                @display("p=304,35");
        }
        routingTable: RoutingTable {
            parameters:
                IPForward = true;
                routerId = "";
                routingFile = "";
                @display("p=61,111");
        }
        udp: UDP {
            parameters:
                @display("p=304,129");
        }
        networkLayer: NetworkLayer {
            parameters:
                proxyARP = false;
                @display("p=304,229;q=queue");
            gates:
                ifIn[1];
                ifOut[1];
        }
        wlan: Ieee80211Nic {
            parameters:
                @display("p=181,229;q=queue");
        }
        eth: <default("EthernetInterface")> like IWiredNic {
            parameters:
                @display("p=368,406,row,60;q=txQueue");
        }
        ext: <default("ExtInterface")> like IExternalNic {
            parameters:
                @display("p=149,406,row,10;q=txQueue;i=block/ifcard");
        }
    connections allowunconnected:
        udp.appOut++ --> app.udp$i;
        udp.appIn++ <-- app.udp$o;

        udp.ipOut --> networkLayer.udpIn;
        udp.ipIn <-- networkLayer.udpOut;

        wlan.upperLayerOut --> networkLayer.ifIn[0];
        wlan.upperLayerIn <-- networkLayer.ifOut[0];

        radioIn --> wlan.radioIn;
        
        ethg <--> { @display("m=s"); } <--> eth.phys;
        eth.upperLayerOut --> networkLayer.ifIn++;
        eth.upperLayerIn <-- networkLayer.ifOut++;

}




